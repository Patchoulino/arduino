CCS PCM C Compiler, Version 4.110, 5967               24-Jun-17 21:44

               Filename: C:\Users\Abraham\Documents\Engineering\PIC\TIC TAC TOE\PIC16F628A.lst

               ROM used: 856 words (42%)
                         Largest free fragment is 1192
               RAM used: 29 (13%) at main() level
                         41 (18%) worst case
               Stack:    3 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1B3
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOMCLR                   //Master Clear pin disabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
....................  
.................... #use delay(int=4000000) 
....................  
.................... // KEYPAD PINS F = Outputs 
.................... #define F1 PIN_A0 
.................... #define F2 PIN_A1 
.................... #define F3 PIN_A2 
.................... #define C1 PIN_A3    //A3,4,5 can only be used as inputs 
.................... #define C2 PIN_A4 
.................... #define C3 PIN_A5 
....................  
.................... #define BTN PIN_A7 
....................  
.................... // BI-COLOR LED MATRIX 
.................... #define R1 PIN_B6 
.................... #define R2 PIN_B7 
.................... #define R3 PIN_A6 
.................... #define G1 PIN_B3 
.................... #define G2 PIN_B4 
.................... #define G3 PIN_B5 
.................... #define T1 PIN_B2 
.................... #define T2 PIN_B1 
.................... #define T3 PIN_B0 
....................  
.................... int game[3][3] = {(0,0,0) 
....................                   (0,0,0) 
....................                   (0,0,0)}; 
*
01C1:  CLRF   20
01C2:  CLRF   21
01C3:  CLRF   22
01C4:  CLRF   23
01C5:  CLRF   24
01C6:  CLRF   25
01C7:  CLRF   26
01C8:  CLRF   27
01C9:  CLRF   28
....................                      
.................... int score[3][3] = {(0,0,0) 
....................                    (0,0,0) 
....................                    (0,0,0)}; 
01CA:  CLRF   29
01CB:  CLRF   2A
01CC:  CLRF   2B
01CD:  CLRF   2C
01CE:  CLRF   2D
01CF:  CLRF   2E
01D0:  CLRF   2F
01D1:  CLRF   30
01D2:  CLRF   31
....................          
.................... int current_matrix = 3; 
.................... int player1_wins = 0; 
.................... int player2_wins = 0; 
.................... int winner = 0; 
.................... const int delay_time = 33; //used x3 times in pause to draw led matrix, 33*3 = 99us = .099ms 
.................... const int delay_count = 1; //number of times that pause is repeated 
....................                     
.................... void pause(long time, int matrix_selector); 
.................... int getn(void); 
.................... void fill_matrix(int number); 
.................... void scoreboard(void); 
.................... void blink_matrix(int matrix_selector); 
....................  
.................... void main() 
.................... { 
*
01B3:  CLRF   04
01B4:  BCF    03.7
01B5:  MOVLW  1F
01B6:  ANDWF  03,F
01B7:  BSF    03.5
01B8:  BSF    0E.3
01B9:  MOVLW  03
01BA:  BCF    03.5
01BB:  MOVWF  32
01BC:  CLRF   33
01BD:  CLRF   34
01BE:  CLRF   35
01BF:  MOVLW  07
01C0:  MOVWF  1F
....................  
....................    set_tris_a(0b10111000); 
*
01D3:  MOVLW  B8
01D4:  TRIS   5
....................    set_tris_b(0b00000000); 
01D5:  MOVLW  00
01D6:  TRIS   6
....................  
....................    setup_oscillator(OSC_4MHZ); 
01D7:  BSF    03.5
01D8:  BSF    0E.3
....................  
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
01D9:  MOVF   01,W
01DA:  ANDLW  C7
01DB:  IORLW  08
01DC:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
01DD:  BCF    03.5
01DE:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
01DF:  MOVLW  00
01E0:  MOVWF  78
01E1:  MOVWF  12
01E2:  MOVLW  00
01E3:  BSF    03.5
01E4:  MOVWF  12
....................    setup_ccp1(CCP_OFF); 
01E5:  BSF    06.3
01E6:  BCF    03.5
01E7:  CLRF   17
....................    setup_comparator(NC_NC_NC_NC); 
01E8:  MOVLW  07
01E9:  MOVWF  1F
01EA:  BSF    03.5
01EB:  MOVF   05,W
01EC:  MOVWF  05
01ED:  MOVLW  03
01EE:  MOVWF  77
01EF:  DECFSZ 77,F
01F0:  GOTO   1EF
01F1:  BCF    03.5
01F2:  MOVF   1F,W
01F3:  BCF    0C.6
....................     
....................    output_a(0x00); 
01F4:  BSF    03.5
01F5:  CLRF   05
01F6:  BCF    03.5
01F7:  CLRF   05
....................    output_b(0x00); 
01F8:  BSF    03.5
01F9:  CLRF   06
01FA:  BCF    03.5
01FB:  CLRF   06
....................     
....................    int current_player = 1; 
....................    int key; 
....................     
....................    int i; 
....................    int j; 
01FC:  MOVLW  01
01FD:  MOVWF  36
....................     
....................     while((player1_wins + player2_wins) < 9) 
....................     {  
01FE:  MOVF   34,W
01FF:  ADDWF  33,W
0200:  SUBLW  08
0201:  BTFSS  03.0
0202:  GOTO   328
....................       //fill_matrix(0); 
....................       winner = 0; 
0203:  CLRF   35
....................      
....................       while(winner == 0)            //Se corre el juego mientras no haya ganador 
....................       { 
0204:  MOVF   35,F
0205:  BTFSS  03.2
0206:  GOTO   2F7
....................          do                         //hasta que se presione una tecla... 
....................          { 
....................             key = getn(); 
0207:  CALL   0E8
0208:  MOVF   78,W
0209:  MOVWF  37
....................          }while(key == 10); 
020A:  MOVF   37,W
020B:  SUBLW  0A
020C:  BTFSC  03.2
020D:  GOTO   207
....................          while(key == getn()) {};   //if key is still being pressed wait for it to stop 
020E:  CALL   0E8
020F:  MOVF   78,W
0210:  SUBWF  37,W
0211:  BTFSC  03.2
0212:  GOTO   20E
....................           
....................          switch(key) 
....................          { 
0213:  MOVF   37,W
0214:  BTFSC  03.2
0215:  GOTO   21A
0216:  XORLW  F8
0217:  BTFSC  03.2
0218:  GOTO   231
0219:  GOTO   2F6
....................             case 0: 
....................                if(player1_wins == player2_wins == 0)  //Si es el inicio del juego podemos seleccionar quien va primero 
021A:  MOVF   34,W
021B:  SUBWF  33,W
021C:  BTFSC  03.2
021D:  GOTO   220
021E:  MOVLW  00
021F:  GOTO   221
0220:  MOVLW  01
0221:  XORLW  00
0222:  BTFSS  03.2
0223:  GOTO   22E
....................                { 
....................                   if(current_player == 1) 
0224:  DECFSZ 36,W
0225:  GOTO   22A
....................                   { 
....................                      current_player = 2; 
0226:  MOVLW  02
0227:  MOVWF  36
....................                      current_matrix = 2; 
0228:  MOVWF  32
....................                   } 
....................                   else 
0229:  GOTO   22D
....................                   { 
....................                      current_player = 1; 
022A:  MOVLW  01
022B:  MOVWF  36
....................                      current_matrix = 1; 
022C:  MOVWF  32
....................                   } 
....................                } 
....................                else 
022D:  GOTO   230
....................                { 
....................                   current_matrix = 4; 
022E:  MOVLW  04
022F:  MOVWF  32
....................                } 
....................             break; 
0230:  GOTO   2F6
....................              
....................             case 1-9: 
....................                current_matrix = 3; 
0231:  MOVLW  03
0232:  MOVWF  32
....................                 
....................                i = (key - 1) / 3;         //la tecla se transforma en coordenadas para la matriz 
0233:  MOVLW  01
0234:  SUBWF  37,W
0235:  MOVWF  3B
0236:  MOVWF  3C
0237:  MOVLW  03
0238:  MOVWF  3D
0239:  GOTO   153
023A:  MOVF   78,W
023B:  MOVWF  38
....................           
....................                if(key >= 1 && key <= 3)   j = key - 1; 
023C:  MOVF   37,W
023D:  SUBLW  00
023E:  BTFSC  03.0
023F:  GOTO   247
0240:  MOVF   37,W
0241:  SUBLW  03
0242:  BTFSS  03.0
0243:  GOTO   247
0244:  MOVLW  01
0245:  SUBWF  37,W
0246:  MOVWF  39
....................                if(key >= 4 && key <= 6)   j = key - 4; 
0247:  MOVF   37,W
0248:  SUBLW  03
0249:  BTFSC  03.0
024A:  GOTO   252
024B:  MOVF   37,W
024C:  SUBLW  06
024D:  BTFSS  03.0
024E:  GOTO   252
024F:  MOVLW  04
0250:  SUBWF  37,W
0251:  MOVWF  39
....................                if(key >= 7 && key <= 9)   j = key - 7; 
0252:  MOVF   37,W
0253:  SUBLW  06
0254:  BTFSC  03.0
0255:  GOTO   25D
0256:  MOVF   37,W
0257:  SUBLW  09
0258:  BTFSS  03.0
0259:  GOTO   25D
025A:  MOVLW  07
025B:  SUBWF  37,W
025C:  MOVWF  39
....................           
....................                if(game[i][j] == 0)      //si la casilla seleccionada esta desocupada se procede 
025D:  MOVF   38,W
025E:  MOVWF  42
025F:  MOVLW  03
0260:  MOVWF  43
0261:  CALL   004
0262:  MOVF   39,W
0263:  ADDWF  78,W
0264:  ADDLW  20
0265:  MOVWF  04
0266:  BCF    03.7
0267:  MOVF   00,F
0268:  BTFSS  03.2
0269:  GOTO   2F5
....................                {                          //por marcarla con el jugador actual y se comprueba que no haya ganado ya 
....................                   game[i][j] = current_player; 
026A:  MOVF   38,W
026B:  MOVWF  42
026C:  MOVLW  03
026D:  MOVWF  43
026E:  CALL   004
026F:  MOVF   39,W
0270:  ADDWF  78,W
0271:  ADDLW  20
0272:  MOVWF  04
0273:  BCF    03.7
0274:  MOVF   36,W
0275:  MOVWF  00
....................              
....................                   if((game[0][0] == game[0][1] == game[0][2]) && game[0][0] != 0)   winner = current_player; 
0276:  MOVF   21,W
0277:  SUBWF  20,W
0278:  BTFSC  03.2
0279:  GOTO   27C
027A:  MOVLW  00
027B:  GOTO   27D
027C:  MOVLW  01
027D:  SUBWF  22,W
027E:  BTFSS  03.2
027F:  GOTO   285
0280:  MOVF   20,F
0281:  BTFSC  03.2
0282:  GOTO   285
0283:  MOVF   36,W
0284:  MOVWF  35
....................                   if((game[1][0] == game[1][1] == game[1][2]) && game[1][1] != 0)   winner = current_player; 
0285:  MOVF   24,W
0286:  SUBWF  23,W
0287:  BTFSC  03.2
0288:  GOTO   28B
0289:  MOVLW  00
028A:  GOTO   28C
028B:  MOVLW  01
028C:  SUBWF  25,W
028D:  BTFSS  03.2
028E:  GOTO   294
028F:  MOVF   24,F
0290:  BTFSC  03.2
0291:  GOTO   294
0292:  MOVF   36,W
0293:  MOVWF  35
....................                   if((game[2][0] == game[2][1] == game[2][2]) && game[2][2] != 0)   winner = current_player; 
0294:  MOVF   27,W
0295:  SUBWF  26,W
0296:  BTFSC  03.2
0297:  GOTO   29A
0298:  MOVLW  00
0299:  GOTO   29B
029A:  MOVLW  01
029B:  SUBWF  28,W
029C:  BTFSS  03.2
029D:  GOTO   2A3
029E:  MOVF   28,F
029F:  BTFSC  03.2
02A0:  GOTO   2A3
02A1:  MOVF   36,W
02A2:  MOVWF  35
....................              
....................                   if((game[0][0] == game[1][0] == game[2][0]) && game[0][0] != 0)   winner = current_player; 
02A3:  MOVF   23,W
02A4:  SUBWF  20,W
02A5:  BTFSC  03.2
02A6:  GOTO   2A9
02A7:  MOVLW  00
02A8:  GOTO   2AA
02A9:  MOVLW  01
02AA:  SUBWF  26,W
02AB:  BTFSS  03.2
02AC:  GOTO   2B2
02AD:  MOVF   20,F
02AE:  BTFSC  03.2
02AF:  GOTO   2B2
02B0:  MOVF   36,W
02B1:  MOVWF  35
....................                   if((game[0][1] == game[1][1] == game[2][1]) && game[1][1] != 0)   winner = current_player; 
02B2:  MOVF   24,W
02B3:  SUBWF  21,W
02B4:  BTFSC  03.2
02B5:  GOTO   2B8
02B6:  MOVLW  00
02B7:  GOTO   2B9
02B8:  MOVLW  01
02B9:  SUBWF  27,W
02BA:  BTFSS  03.2
02BB:  GOTO   2C1
02BC:  MOVF   24,F
02BD:  BTFSC  03.2
02BE:  GOTO   2C1
02BF:  MOVF   36,W
02C0:  MOVWF  35
....................                   if((game[0][2] == game[1][2] == game[2][2]) && game[2][2] != 0)   winner = current_player; 
02C1:  MOVF   25,W
02C2:  SUBWF  22,W
02C3:  BTFSC  03.2
02C4:  GOTO   2C7
02C5:  MOVLW  00
02C6:  GOTO   2C8
02C7:  MOVLW  01
02C8:  SUBWF  28,W
02C9:  BTFSS  03.2
02CA:  GOTO   2D0
02CB:  MOVF   28,F
02CC:  BTFSC  03.2
02CD:  GOTO   2D0
02CE:  MOVF   36,W
02CF:  MOVWF  35
....................              
....................                   if((game[0][0] == game[1][1] == game[2][2]) && game[1][1] != 0)   winner = current_player; 
02D0:  MOVF   24,W
02D1:  SUBWF  20,W
02D2:  BTFSC  03.2
02D3:  GOTO   2D6
02D4:  MOVLW  00
02D5:  GOTO   2D7
02D6:  MOVLW  01
02D7:  SUBWF  28,W
02D8:  BTFSS  03.2
02D9:  GOTO   2DF
02DA:  MOVF   24,F
02DB:  BTFSC  03.2
02DC:  GOTO   2DF
02DD:  MOVF   36,W
02DE:  MOVWF  35
....................                   if((game[2][0] == game[1][1] == game[0][2]) && game[1][1] != 0)   winner = current_player; 
02DF:  MOVF   24,W
02E0:  SUBWF  26,W
02E1:  BTFSC  03.2
02E2:  GOTO   2E5
02E3:  MOVLW  00
02E4:  GOTO   2E6
02E5:  MOVLW  01
02E6:  SUBWF  22,W
02E7:  BTFSS  03.2
02E8:  GOTO   2EE
02E9:  MOVF   24,F
02EA:  BTFSC  03.2
02EB:  GOTO   2EE
02EC:  MOVF   36,W
02ED:  MOVWF  35
....................              
....................                   current_player++;       //se hace el cambio de jugador 
02EE:  INCF   36,F
....................                   if(current_player == 3) current_player = 1; 
02EF:  MOVF   36,W
02F0:  SUBLW  03
02F1:  BTFSS  03.2
02F2:  GOTO   2F5
02F3:  MOVLW  01
02F4:  MOVWF  36
....................                } 
....................             break; 
02F5:  GOTO   2F6
....................          } 
....................       } 
02F6:  GOTO   204
....................        
....................       do{                           //el juego anterior se muestra hasta que se presiona una tecla 
....................          key = getn(); 
02F7:  CALL   0E8
02F8:  MOVF   78,W
02F9:  MOVWF  37
....................          blink_matrix(3); 
02FA:  MOVLW  03
02FB:  MOVWF  3A
02FC:  CALL   168
....................       }while(key == 10);   
02FD:  MOVF   37,W
02FE:  SUBLW  0A
02FF:  BTFSC  03.2
0300:  GOTO   2F7
....................       while(key == getn())  
....................       { 
0301:  CALL   0E8
0302:  MOVF   78,W
0303:  SUBWF  37,W
0304:  BTFSS  03.2
0305:  GOTO   30A
....................          blink_matrix(3); 
0306:  MOVLW  03
0307:  MOVWF  3A
0308:  CALL   168
....................       }   //if key is still being pressed wait for it to stop 
0309:  GOTO   301
....................           
....................       //quien haya ganado se lleva sus victorias a su record, esto se usa para ver si es el inicio del juego o no 
....................       if(winner == 1)   player1_wins++; 
030A:  DECFSZ 35,W
030B:  GOTO   30D
030C:  INCF   33,F
....................       if(winner == 2)   player2_wins++; 
030D:  MOVF   35,W
030E:  SUBLW  02
030F:  BTFSC  03.2
0310:  INCF   34,F
....................        
....................       scoreboard();  // se modifica la matriz de resultados 
0311:  GOTO   187
....................       current_matrix = 4; 
0312:  MOVLW  04
0313:  MOVWF  32
....................        
....................       do{ 
....................          key = getn(); 
0314:  CALL   0E8
0315:  MOVF   78,W
0316:  MOVWF  37
....................          blink_matrix(4); 
0317:  MOVLW  04
0318:  MOVWF  3A
0319:  CALL   168
....................       }while(key == 10); 
031A:  MOVF   37,W
031B:  SUBLW  0A
031C:  BTFSC  03.2
031D:  GOTO   314
....................       while(key == getn())  
....................       { 
031E:  CALL   0E8
031F:  MOVF   78,W
0320:  SUBWF  37,W
0321:  BTFSS  03.2
0322:  GOTO   327
....................          blink_matrix(4); 
0323:  MOVLW  04
0324:  MOVWF  3A
0325:  CALL   168
....................       } 
0326:  GOTO   31E
....................     } 
0327:  GOTO   1FE
....................      
....................     if(player1_wins > player2_wins) //Endless loop showing the winner's color and scoreboard 
0328:  MOVF   33,W
0329:  SUBWF  34,W
032A:  BTFSC  03.0
032B:  GOTO   339
....................     { 
....................       while(1) 
....................       { 
....................          pause(delay_count,1); 
032C:  CLRF   3C
032D:  MOVLW  01
032E:  MOVWF  3B
032F:  MOVWF  3D
0330:  CALL   029
....................          pause(delay_count,4); 
0331:  CLRF   3C
0332:  MOVLW  01
0333:  MOVWF  3B
0334:  MOVLW  04
0335:  MOVWF  3D
0336:  CALL   029
....................       } 
0337:  GOTO   32C
....................     } 
....................     else if(player1_wins == player2_wins) 
0338:  GOTO   357
0339:  MOVF   34,W
033A:  SUBWF  33,W
033B:  BTFSS  03.2
033C:  GOTO   34A
....................     { 
....................       while(1) 
....................       { 
....................          pause(delay_count,0); 
033D:  CLRF   3C
033E:  MOVLW  01
033F:  MOVWF  3B
0340:  CLRF   3D
0341:  CALL   029
....................          pause(delay_count,4); 
0342:  CLRF   3C
0343:  MOVLW  01
0344:  MOVWF  3B
0345:  MOVLW  04
0346:  MOVWF  3D
0347:  CALL   029
....................       } 
0348:  GOTO   33D
....................     } 
....................     else 
0349:  GOTO   357
....................     { 
....................       while(1) 
....................       { 
....................          pause(delay_count,2); 
034A:  CLRF   3C
034B:  MOVLW  01
034C:  MOVWF  3B
034D:  MOVLW  02
034E:  MOVWF  3D
034F:  CALL   029
....................          pause(delay_count,4); 
0350:  CLRF   3C
0351:  MOVLW  01
0352:  MOVWF  3B
0353:  MOVLW  04
0354:  MOVWF  3D
0355:  CALL   029
....................       } 
0356:  GOTO   34A
....................     } 
.................... } 
....................  
.................... void pause(long time, int matrix_selector) // default delay that also prints 3x3 led matrix 
.................... { 
0357:  SLEEP
....................    int t, i, j, player; 
....................     
....................    for(t=0; t<time; t++) 
*
0029:  CLRF   3E
002A:  MOVF   3C,F
002B:  BTFSS  03.2
002C:  GOTO   031
002D:  MOVF   3B,W
002E:  SUBWF  3E,W
002F:  BTFSC  03.0
0030:  GOTO   0DE
....................    { 
....................       for(i=0; i<3; i++) 
0031:  CLRF   3F
0032:  MOVF   3F,W
0033:  SUBLW  02
0034:  BTFSS  03.0
0035:  GOTO   0DC
....................       { 
....................          for(j=0; j<3; j++) 
0036:  CLRF   40
0037:  MOVF   40,W
0038:  SUBLW  02
0039:  BTFSS  03.0
003A:  GOTO   09C
....................          { 
....................             switch(matrix_selector) 
....................             { 
003B:  MOVF   3D,W
003C:  ADDLW  FB
003D:  BTFSC  03.0
003E:  GOTO   063
003F:  ADDLW  05
0040:  GOTO   0DF
....................                case 0: 
....................                   player = 0; 
0041:  CLRF   41
....................                   break; 
0042:  GOTO   063
....................                case 1: 
....................                   player = 1; 
0043:  MOVLW  01
0044:  MOVWF  41
....................                   break; 
0045:  GOTO   063
....................                case 2: 
....................                   player = 2; 
0046:  MOVLW  02
0047:  MOVWF  41
....................                   break; 
0048:  GOTO   063
....................                case 3: 
....................                   player = game[i][j]; 
0049:  MOVF   3F,W
004A:  MOVWF  42
004B:  MOVLW  03
004C:  MOVWF  43
004D:  CALL   004
004E:  MOVF   40,W
004F:  ADDWF  78,W
0050:  ADDLW  20
0051:  MOVWF  04
0052:  BCF    03.7
0053:  MOVF   00,W
0054:  MOVWF  41
....................                   break; 
0055:  GOTO   063
....................                case 4: 
....................                   player = score[i][j]; 
0056:  MOVF   3F,W
0057:  MOVWF  42
0058:  MOVLW  03
0059:  MOVWF  43
005A:  CALL   004
005B:  MOVF   40,W
005C:  ADDWF  78,W
005D:  ADDLW  29
005E:  MOVWF  04
005F:  BCF    03.7
0060:  MOVF   00,W
0061:  MOVWF  41
....................                   break; 
0062:  GOTO   063
....................             } 
....................              
....................             switch(j) 
....................             { 
0063:  MOVF   40,W
0064:  BTFSC  03.2
0065:  GOTO   06D
0066:  XORLW  01
0067:  BTFSC  03.2
0068:  GOTO   07C
0069:  XORLW  03
006A:  BTFSC  03.2
006B:  GOTO   08B
006C:  GOTO   09A
....................                case 0: 
....................                   if(player == 1)   output_bit(R1,1); 
006D:  DECFSZ 41,W
006E:  GOTO   073
006F:  BSF    06.6
0070:  BSF    03.5
0071:  BCF    06.6
0072:  BCF    03.5
....................                   if(player == 2)   output_bit(G1,1); 
0073:  MOVF   41,W
0074:  SUBLW  02
0075:  BTFSS  03.2
0076:  GOTO   07B
0077:  BSF    06.3
0078:  BSF    03.5
0079:  BCF    06.3
007A:  BCF    03.5
....................                   break; 
007B:  GOTO   09A
....................                case 1: 
....................                   if(player == 1)   output_bit(R2,1); 
007C:  DECFSZ 41,W
007D:  GOTO   082
007E:  BSF    06.7
007F:  BSF    03.5
0080:  BCF    06.7
0081:  BCF    03.5
....................                   if(player == 2)   output_bit(G2,1); 
0082:  MOVF   41,W
0083:  SUBLW  02
0084:  BTFSS  03.2
0085:  GOTO   08A
0086:  BSF    06.4
0087:  BSF    03.5
0088:  BCF    06.4
0089:  BCF    03.5
....................                   break; 
008A:  GOTO   09A
....................                case 2: 
....................                   if(player == 1)   output_bit(R3,1); 
008B:  DECFSZ 41,W
008C:  GOTO   091
008D:  BSF    05.6
008E:  BSF    03.5
008F:  BCF    05.6
0090:  BCF    03.5
....................                   if(player == 2)   output_bit(G3,1); 
0091:  MOVF   41,W
0092:  SUBLW  02
0093:  BTFSS  03.2
0094:  GOTO   099
0095:  BSF    06.5
0096:  BSF    03.5
0097:  BCF    06.5
0098:  BCF    03.5
....................                   break; 
0099:  GOTO   09A
....................             } 
....................          } 
009A:  INCF   40,F
009B:  GOTO   037
....................           
....................          if(i == 0)  output_bit(T1,1); 
009C:  MOVF   3F,F
009D:  BTFSS  03.2
009E:  GOTO   0A3
009F:  BSF    06.2
00A0:  BSF    03.5
00A1:  BCF    06.2
00A2:  BCF    03.5
....................          if(i == 1)  output_bit(T2,1); 
00A3:  DECFSZ 3F,W
00A4:  GOTO   0A9
00A5:  BSF    06.1
00A6:  BSF    03.5
00A7:  BCF    06.1
00A8:  BCF    03.5
....................          if(i == 2)  output_bit(T3,1); 
00A9:  MOVF   3F,W
00AA:  SUBLW  02
00AB:  BTFSS  03.2
00AC:  GOTO   0B1
00AD:  BSF    06.0
00AE:  BSF    03.5
00AF:  BCF    06.0
00B0:  BCF    03.5
....................           
....................          delay_us(delay_time); 
00B1:  MOVLW  0A
00B2:  MOVWF  77
00B3:  DECFSZ 77,F
00B4:  GOTO   0B3
00B5:  GOTO   0B6
....................           
....................          output_bit(R1,0); 
00B6:  BCF    06.6
00B7:  BSF    03.5
00B8:  BCF    06.6
....................          output_bit(R2,0); 
00B9:  BCF    03.5
00BA:  BCF    06.7
00BB:  BSF    03.5
00BC:  BCF    06.7
....................          output_bit(R3,0); 
00BD:  BCF    03.5
00BE:  BCF    05.6
00BF:  BSF    03.5
00C0:  BCF    05.6
....................          output_bit(G1,0); 
00C1:  BCF    03.5
00C2:  BCF    06.3
00C3:  BSF    03.5
00C4:  BCF    06.3
....................          output_bit(G2,0); 
00C5:  BCF    03.5
00C6:  BCF    06.4
00C7:  BSF    03.5
00C8:  BCF    06.4
....................          output_bit(G3,0); 
00C9:  BCF    03.5
00CA:  BCF    06.5
00CB:  BSF    03.5
00CC:  BCF    06.5
....................          output_bit(T1,0); 
00CD:  BCF    03.5
00CE:  BCF    06.2
00CF:  BSF    03.5
00D0:  BCF    06.2
....................          output_bit(T2,0); 
00D1:  BCF    03.5
00D2:  BCF    06.1
00D3:  BSF    03.5
00D4:  BCF    06.1
....................          output_bit(T3,0); 
00D5:  BCF    03.5
00D6:  BCF    06.0
00D7:  BSF    03.5
00D8:  BCF    06.0
....................       } 
00D9:  BCF    03.5
00DA:  INCF   3F,F
00DB:  GOTO   032
....................    } 
00DC:  INCF   3E,F
00DD:  GOTO   02A
.................... } 
00DE:  RETURN
....................  
.................... int getn(void) // 3x3 keyboard function returns 10 if nothing pressed 
.................... { 
*
00E8:  MOVLW  0A
00E9:  MOVWF  3A
....................    int n = 10; 
....................     
....................    output_bit(F1,1); 
00EA:  BSF    05.0
00EB:  BSF    03.5
00EC:  BCF    05.0
....................    if(input(C1))  n = 1; 
00ED:  BSF    05.3
00EE:  BCF    03.5
00EF:  BTFSS  05.3
00F0:  GOTO   0F3
00F1:  MOVLW  01
00F2:  MOVWF  3A
....................    if(input(C2))  n = 2; 
00F3:  BSF    03.5
00F4:  BSF    05.4
00F5:  BCF    03.5
00F6:  BTFSS  05.4
00F7:  GOTO   0FA
00F8:  MOVLW  02
00F9:  MOVWF  3A
....................    if(input(C3))  n = 3; 
00FA:  BSF    03.5
00FB:  BSF    05.5
00FC:  BCF    03.5
00FD:  BTFSS  05.5
00FE:  GOTO   101
00FF:  MOVLW  03
0100:  MOVWF  3A
....................    pause(delay_count,current_matrix); 
0101:  CLRF   3C
0102:  MOVLW  01
0103:  MOVWF  3B
0104:  MOVF   32,W
0105:  MOVWF  3D
0106:  CALL   029
....................    
....................    output_bit(F1,0); 
0107:  BCF    05.0
0108:  BSF    03.5
0109:  BCF    05.0
....................    output_bit(F2,1); 
010A:  BCF    03.5
010B:  BSF    05.1
010C:  BSF    03.5
010D:  BCF    05.1
....................    if(input(C1))  n = 4; 
010E:  BSF    05.3
010F:  BCF    03.5
0110:  BTFSS  05.3
0111:  GOTO   114
0112:  MOVLW  04
0113:  MOVWF  3A
....................    if(input(C2))  n = 5; 
0114:  BSF    03.5
0115:  BSF    05.4
0116:  BCF    03.5
0117:  BTFSS  05.4
0118:  GOTO   11B
0119:  MOVLW  05
011A:  MOVWF  3A
....................    if(input(C3))  n = 6; 
011B:  BSF    03.5
011C:  BSF    05.5
011D:  BCF    03.5
011E:  BTFSS  05.5
011F:  GOTO   122
0120:  MOVLW  06
0121:  MOVWF  3A
....................    pause(delay_count,current_matrix); 
0122:  CLRF   3C
0123:  MOVLW  01
0124:  MOVWF  3B
0125:  MOVF   32,W
0126:  MOVWF  3D
0127:  CALL   029
....................     
....................    output_bit(F2,0); 
0128:  BCF    05.1
0129:  BSF    03.5
012A:  BCF    05.1
....................    output_bit(F3,1); 
012B:  BCF    03.5
012C:  BSF    05.2
012D:  BSF    03.5
012E:  BCF    05.2
....................    if(input(C1))  n = 7; 
012F:  BSF    05.3
0130:  BCF    03.5
0131:  BTFSS  05.3
0132:  GOTO   135
0133:  MOVLW  07
0134:  MOVWF  3A
....................    if(input(C2))  n = 8; 
0135:  BSF    03.5
0136:  BSF    05.4
0137:  BCF    03.5
0138:  BTFSS  05.4
0139:  GOTO   13C
013A:  MOVLW  08
013B:  MOVWF  3A
....................    if(input(C3))  n = 9; 
013C:  BSF    03.5
013D:  BSF    05.5
013E:  BCF    03.5
013F:  BTFSS  05.5
0140:  GOTO   143
0141:  MOVLW  09
0142:  MOVWF  3A
....................    pause(delay_count,current_matrix); 
0143:  CLRF   3C
0144:  MOVLW  01
0145:  MOVWF  3B
0146:  MOVF   32,W
0147:  MOVWF  3D
0148:  CALL   029
....................     
....................    output_bit(F3,0); 
0149:  BCF    05.2
014A:  BSF    03.5
014B:  BCF    05.2
....................    if(input(BTN)) n = 0; 
014C:  BSF    05.7
014D:  BCF    03.5
014E:  BTFSC  05.7
014F:  CLRF   3A
....................     
....................    return n; 
0150:  MOVF   3A,W
0151:  MOVWF  78
.................... } 
0152:  RETURN
....................  
.................... void fill_matrix(int number) // cleans the game matrix by setting all zeros 
.................... { 
....................    int i, j; 
....................  
....................    for(i=0; i<3; i++)            //Se limpia la matriz para  
....................    {                             //juego nuevo 
....................       for(j=0; j<3; j++) 
....................       { 
....................          game[i][j] = number; 
....................       } 
....................    } 
.................... } 
....................  
.................... void scoreboard(void) // draws the scoreboard into the matrix variable 
.................... { 
*
0187:  BCF    3C.0
....................    int i, j; 
....................    short scored = 0; 
....................  
....................    for(i=0; i<3; i++)              
0188:  CLRF   3A
0189:  MOVF   3A,W
018A:  SUBLW  02
018B:  BTFSS  03.0
018C:  GOTO   1B2
....................    {                              
....................       for(j=0; j<3; j++) 
018D:  CLRF   3B
018E:  MOVF   3B,W
018F:  SUBLW  02
0190:  BTFSS  03.0
0191:  GOTO   1B0
....................       { 
....................          if(score[i][j] == 0 && scored == 0) 
0192:  MOVF   3A,W
0193:  MOVWF  42
0194:  MOVLW  03
0195:  MOVWF  43
0196:  CALL   004
0197:  MOVF   3B,W
0198:  ADDWF  78,W
0199:  ADDLW  29
019A:  MOVWF  04
019B:  BCF    03.7
019C:  MOVF   00,F
019D:  BTFSS  03.2
019E:  GOTO   1AE
019F:  BTFSC  3C.0
01A0:  GOTO   1AE
....................          { 
....................             score[i][j] = winner; 
01A1:  MOVF   3A,W
01A2:  MOVWF  42
01A3:  MOVLW  03
01A4:  MOVWF  43
01A5:  CALL   004
01A6:  MOVF   3B,W
01A7:  ADDWF  78,W
01A8:  ADDLW  29
01A9:  MOVWF  04
01AA:  BCF    03.7
01AB:  MOVF   35,W
01AC:  MOVWF  00
....................             scored = 1; 
01AD:  BSF    3C.0
....................          } 
....................       } 
01AE:  INCF   3B,F
01AF:  GOTO   18E
....................    } 
01B0:  INCF   3A,F
01B1:  GOTO   189
.................... } 
01B2:  GOTO   312 (RETURN)
....................  
.................... void blink_matrix(int matrix_selector) 
.................... { 
....................    switch(current_matrix) 
....................    { 
*
0168:  MOVF   32,W
0169:  XORLW  00
016A:  BTFSC  03.2
016B:  GOTO   173
016C:  XORLW  03
016D:  BTFSC  03.2
016E:  GOTO   182
016F:  XORLW  07
0170:  BTFSC  03.2
0171:  GOTO   184
0172:  GOTO   186
....................       case 0: 
....................          switch(matrix_selector) 
....................          { 
0173:  MOVF   3A,W
0174:  XORLW  03
0175:  BTFSC  03.2
0176:  GOTO   17B
0177:  XORLW  07
0178:  BTFSC  03.2
0179:  GOTO   17E
017A:  GOTO   181
....................             case 3: 
....................                current_matrix = 3; 
017B:  MOVLW  03
017C:  MOVWF  32
....................                break; 
017D:  GOTO   181
....................             case 4: 
....................                current_matrix = 4; 
017E:  MOVLW  04
017F:  MOVWF  32
....................                break; 
0180:  GOTO   181
....................          } 
....................          break; 
0181:  GOTO   186
....................       case 3: 
....................          current_matrix = 0; 
0182:  CLRF   32
....................          break; 
0183:  GOTO   186
....................       case 4: 
....................          current_matrix = 0; 
0184:  CLRF   32
....................          break; 
0185:  GOTO   186
....................    } 
.................... } 
0186:  RETURN

Configuration Fuses:
   Word  1: 3F10   NOWDT PUT NOPROTECT NOBROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
