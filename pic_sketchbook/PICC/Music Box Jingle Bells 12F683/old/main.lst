CCS PCM C Compiler, Version 4.110, 5967               03-dic-15 23:38

               Filename: C:\Users\Patchouli\Documents\PIC\Music Box Jingle Bells 12F675\main.lst

               ROM used: 989 words (97%)
                         Largest free fragment is 35
               RAM used: 11 (17%) at main() level
                         50 (78%) worst case
               Stack:    3 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
0004:  CALL   3FF
0005:  BSF    03.5
0006:  MOVWF  10
0007:  MOVLW  00
0008:  MOVWF  0A
0009:  GOTO   21A
.................... #include <12F675.h> 
.................... //////// Standard Header file for the PIC12F675 device //////////////// 
.................... #device PIC12F675 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
....................  
.................... #use delay(int=4000000) 
*
0046:  MOVLW  42
0047:  MOVWF  04
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   059
004B:  MOVLW  01
004C:  MOVWF  21
004D:  CLRF   20
004E:  DECFSZ 20,F
004F:  GOTO   04E
0050:  DECFSZ 21,F
0051:  GOTO   04D
0052:  MOVLW  4A
0053:  MOVWF  20
0054:  DECFSZ 20,F
0055:  GOTO   054
0056:  GOTO   057
0057:  DECFSZ 00,F
0058:  GOTO   04B
0059:  RETURN
*
00E7:  MOVLW  12
00E8:  SUBWF  42,F
00E9:  BTFSS  03.0
00EA:  GOTO   0F9
00EB:  MOVLW  42
00EC:  MOVWF  04
00ED:  MOVLW  FC
00EE:  ANDWF  00,F
00EF:  BCF    03.0
00F0:  RRF    00,F
00F1:  RRF    00,F
00F2:  MOVF   00,W
00F3:  BTFSC  03.2
00F4:  GOTO   0F9
00F5:  GOTO   0F7
00F6:  NOP
00F7:  DECFSZ 00,F
00F8:  GOTO   0F6
....................  
.................... #define TONE_PIN  PIN_A0 
.................... #include <TONES.C> 
.................... ////////////////// Driver to generate musical tones ///////////////////// 
.................... ////                                                                 //// 
.................... ////  generate_tone(frequency, duration)     Generates wave at set   //// 
.................... ////                                         frequency (Hz) for set  //// 
.................... ////                                         duration (ms)           //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef  MUSIC_NOTES 
.................... #define  MUSIC_NOTES 
....................  
.................... //            NOTE                 FREQUENCY 
.................... //                     Octave0  Octave1  Octave2  Octave3 
.................... const long C_NOTE[4]  ={ 262,     523,    1047,    2093}; 
.................... const long Db_NOTE[4] ={ 277,     554,    1109,    2217}; 
.................... const long D_NOTE[4]  ={ 294,     587,    1175,    2349}; 
.................... const long Eb_NOTE[4] ={ 311,     622,    1245,    2489}; 
.................... const long E_NOTE[4]  ={ 330,     659,    1329,    2637}; 
.................... const long F_NOTE[4]  ={ 349,     698,    1397,    2794}; 
.................... const long Gb_NOTE[4] ={ 370,     740,    1480,    2960}; 
.................... const long G_NOTE[4]  ={ 392,     784,    1568,    3136}; 
.................... const long Ab_NOTE[4] ={ 415,     831,    1661,    3322}; 
.................... const long A_NOTE[4]  ={ 440,     880,    1760,    3520}; 
.................... const long Bb_NOTE[4] ={ 466,     923,    1865,    3729}; 
.................... const long B_NOTE[4]  ={ 494,     988,    1976,    3951}; 
.................... #endif 
....................  
.................... #ifndef TONE_PIN 
.................... #define TONE_PIN  PIN_B0 
.................... #endif 
....................  
.................... void do_delay(int ms_delay, int num_ms, int us_delay, int num_us)  { 
....................  int i; 
....................  
....................  for(i=0;i<num_ms;i++) 
*
00CD:  CLRF   41
00CE:  MOVF   3E,W
00CF:  SUBWF  41,W
00D0:  BTFSC  03.0
00D1:  GOTO   0D7
....................   delay_ms(250); 
00D2:  MOVLW  FA
00D3:  MOVWF  42
00D4:  CALL   046
00D5:  INCF   41,F
00D6:  GOTO   0CE
....................  delay_ms(ms_delay); 
00D7:  MOVF   3D,W
00D8:  MOVWF  42
00D9:  CALL   046
....................  for(i=0;i<num_us;i++) 
00DA:  CLRF   41
00DB:  MOVF   40,W
00DC:  SUBWF  41,W
00DD:  BTFSC  03.0
00DE:  GOTO   0E5
....................   delay_us(250); 
00DF:  MOVLW  53
00E0:  MOVWF  20
00E1:  DECFSZ 20,F
00E2:  GOTO   0E1
00E3:  INCF   41,F
00E4:  GOTO   0DB
....................  delay_us(us_delay); 
00E5:  MOVF   3F,W
00E6:  MOVWF  42
.................... } 
*
00F9:  RETURN
....................  
....................  
.................... void generate_tone(long frequency, long duration) 
.................... { 
....................    int32 total_delay_time;                      // in microseconds 
....................    long total_ms_delay_time, total_us_delay_time; 
....................    int num_us_delays, num_ms_delays, ms_delay_time, us_delay_time; 
....................    long num_periods; 
....................  
....................    total_delay_time = (1000000/frequency)/2-10; // calculate total delay time (10 for error) 
00FA:  BCF    03.1
00FB:  CLRF   48
00FC:  MOVLW  0F
00FD:  MOVWF  47
00FE:  MOVLW  42
00FF:  MOVWF  46
0100:  MOVLW  40
0101:  MOVWF  45
0102:  CLRF   4C
0103:  CLRF   4B
0104:  MOVF   2C,W
0105:  MOVWF  4A
0106:  MOVF   2B,W
0107:  MOVWF  49
0108:  CALL   05A
0109:  MOVF   23,W
010A:  MOVWF  40
010B:  MOVF   22,W
010C:  MOVWF  3F
010D:  MOVF   21,W
010E:  MOVWF  3E
010F:  MOVF   20,W
0110:  MOVWF  3D
0111:  BCF    03.0
0112:  RRF    40,F
0113:  RRF    3F,F
0114:  RRF    3E,F
0115:  RRF    3D,F
0116:  MOVLW  0A
0117:  SUBWF  3D,W
0118:  MOVWF  2F
0119:  MOVF   3E,W
011A:  MOVWF  30
011B:  MOVLW  00
011C:  BTFSS  03.0
011D:  MOVLW  01
011E:  SUBWF  30,F
011F:  MOVF   3F,W
0120:  MOVWF  31
0121:  MOVLW  00
0122:  BTFSS  03.0
0123:  MOVLW  01
0124:  SUBWF  31,F
0125:  MOVF   40,W
0126:  MOVWF  32
0127:  MOVLW  00
0128:  BTFSS  03.0
0129:  MOVLW  01
012A:  SUBWF  32,F
....................  
....................    total_ms_delay_time = total_delay_time/1000; // total delay time of ms 
012B:  BCF    03.1
012C:  MOVF   32,W
012D:  MOVWF  48
012E:  MOVF   31,W
012F:  MOVWF  47
0130:  MOVF   30,W
0131:  MOVWF  46
0132:  MOVF   2F,W
0133:  MOVWF  45
0134:  CLRF   4C
0135:  CLRF   4B
0136:  MOVLW  03
0137:  MOVWF  4A
0138:  MOVLW  E8
0139:  MOVWF  49
013A:  CALL   05A
013B:  MOVF   21,W
013C:  MOVWF  34
013D:  MOVF   20,W
013E:  MOVWF  33
....................    num_ms_delays = total_ms_delay_time/250;     // number of 250ms delays needed 
013F:  MOVF   34,W
0140:  MOVWF  3E
0141:  MOVF   33,W
0142:  MOVWF  3D
0143:  CLRF   40
0144:  MOVLW  FA
0145:  MOVWF  3F
0146:  CALL   0A8
0147:  MOVF   21,W
0148:  MOVWF  38
....................    ms_delay_time = total_ms_delay_time%250;     // left over ms delay time needed 
0149:  MOVF   34,W
014A:  MOVWF  3E
014B:  MOVF   33,W
014C:  MOVWF  3D
014D:  CLRF   40
014E:  MOVLW  FA
014F:  MOVWF  3F
0150:  CALL   0A8
0151:  MOVF   20,W
0152:  MOVWF  39
....................  
....................    total_us_delay_time = total_delay_time%1000; // total delay time of us (ms already acounted for) 
0153:  BSF    03.1
0154:  MOVLW  3D
0155:  MOVWF  04
0156:  MOVF   32,W
0157:  MOVWF  48
0158:  MOVF   31,W
0159:  MOVWF  47
015A:  MOVF   30,W
015B:  MOVWF  46
015C:  MOVF   2F,W
015D:  MOVWF  45
015E:  CLRF   4C
015F:  CLRF   4B
0160:  MOVLW  03
0161:  MOVWF  4A
0162:  MOVLW  E8
0163:  MOVWF  49
0164:  CALL   05A
0165:  MOVF   3E,W
0166:  MOVWF  36
0167:  MOVF   3D,W
0168:  MOVWF  35
....................    num_us_delays = total_us_delay_time/250;     // number of 250us delays needed 
0169:  MOVF   36,W
016A:  MOVWF  3E
016B:  MOVF   35,W
016C:  MOVWF  3D
016D:  CLRF   40
016E:  MOVLW  FA
016F:  MOVWF  3F
0170:  CALL   0A8
0171:  MOVF   21,W
0172:  MOVWF  37
....................    us_delay_time = total_us_delay_time%250;     // left over us delay time needed 
0173:  MOVF   36,W
0174:  MOVWF  3E
0175:  MOVF   35,W
0176:  MOVWF  3D
0177:  CLRF   40
0178:  MOVLW  FA
0179:  MOVWF  3F
017A:  CALL   0A8
017B:  MOVF   20,W
017C:  MOVWF  3A
....................  
....................    num_periods = ((int32)duration*1000)/(1000000/frequency); 
017D:  CLRF   40
017E:  CLRF   3F
017F:  MOVF   2E,W
0180:  MOVWF  3E
0181:  MOVF   2D,W
0182:  MOVWF  3D
0183:  MOVF   40,W
0184:  MOVWF  44
0185:  MOVF   3F,W
0186:  MOVWF  43
0187:  MOVF   3E,W
0188:  MOVWF  42
0189:  MOVF   3D,W
018A:  MOVWF  41
018B:  CLRF   48
018C:  CLRF   47
018D:  MOVLW  03
018E:  MOVWF  46
018F:  MOVLW  E8
0190:  MOVWF  45
*
01BA:  MOVF   23,W
01BB:  MOVWF  40
01BC:  MOVF   22,W
01BD:  MOVWF  3F
01BE:  MOVF   21,W
01BF:  MOVWF  3E
01C0:  MOVF   20,W
01C1:  MOVWF  3D
01C2:  BCF    03.1
01C3:  CLRF   48
01C4:  MOVLW  0F
01C5:  MOVWF  47
01C6:  MOVLW  42
01C7:  MOVWF  46
01C8:  MOVLW  40
01C9:  MOVWF  45
01CA:  CLRF   4C
01CB:  CLRF   4B
01CC:  MOVF   2C,W
01CD:  MOVWF  4A
01CE:  MOVF   2B,W
01CF:  MOVWF  49
01D0:  CALL   05A
01D1:  MOVF   23,W
01D2:  MOVWF  44
01D3:  MOVF   22,W
01D4:  MOVWF  43
01D5:  MOVF   21,W
01D6:  MOVWF  42
01D7:  MOVF   20,W
01D8:  MOVWF  41
01D9:  BCF    03.1
01DA:  MOVF   40,W
01DB:  MOVWF  48
01DC:  MOVF   3F,W
01DD:  MOVWF  47
01DE:  MOVF   3E,W
01DF:  MOVWF  46
01E0:  MOVF   3D,W
01E1:  MOVWF  45
01E2:  MOVF   23,W
01E3:  MOVWF  4C
01E4:  MOVF   22,W
01E5:  MOVWF  4B
01E6:  MOVF   21,W
01E7:  MOVWF  4A
01E8:  MOVF   20,W
01E9:  MOVWF  49
01EA:  CALL   05A
01EB:  MOVF   21,W
01EC:  MOVWF  3C
01ED:  MOVF   20,W
01EE:  MOVWF  3B
....................  
....................    while((num_periods--) != 0) 
....................    { 
01EF:  MOVF   3C,W
01F0:  MOVWF  23
01F1:  MOVF   3B,W
01F2:  BTFSC  03.2
01F3:  DECF   3C,F
01F4:  DECF   3B,F
01F5:  MOVWF  3D
01F6:  MOVF   23,W
01F7:  MOVWF  3E
01F8:  MOVF   3D,F
01F9:  BTFSS  03.2
01FA:  GOTO   1FE
01FB:  MOVF   3E,F
01FC:  BTFSC  03.2
01FD:  GOTO   219
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
01FE:  MOVF   39,W
01FF:  MOVWF  3D
0200:  MOVF   38,W
0201:  MOVWF  3E
0202:  MOVF   3A,W
0203:  MOVWF  3F
0204:  MOVF   37,W
0205:  MOVWF  40
0206:  CALL   0CD
....................       output_high(TONE_PIN); 
0207:  BSF    03.5
0208:  BCF    05.0
0209:  BCF    03.5
020A:  BSF    05.0
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
020B:  MOVF   39,W
020C:  MOVWF  3D
020D:  MOVF   38,W
020E:  MOVWF  3E
020F:  MOVF   3A,W
0210:  MOVWF  3F
0211:  MOVF   37,W
0212:  MOVWF  40
0213:  CALL   0CD
....................       output_low(TONE_PIN); 
0214:  BSF    03.5
0215:  BCF    05.0
0216:  BCF    03.5
0217:  BCF    05.0
....................    } 
0218:  GOTO   1EF
....................  
....................    return; 
.................... } 
0219:  RETURN
....................  
....................  
.................... #define BTN PIN_A3 
....................  
.................... int quartet = 1; 
.................... int duration = 100; 
.................... int pause = 100; 
.................... int i; 
....................  
.................... void main() 
.................... { 
021A:  CLRF   04
021B:  MOVLW  1F
021C:  ANDWF  03,F
021D:  MOVLW  01
021E:  MOVWF  24
021F:  MOVLW  64
0220:  MOVWF  25
0221:  MOVWF  26
0222:  BCF    1F.6
0223:  BSF    03.5
0224:  BCF    1F.0
0225:  BCF    1F.1
0226:  BCF    1F.2
0227:  BCF    1F.3
0228:  MOVLW  07
0229:  BCF    03.5
022A:  MOVWF  19
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
022B:  BCF    1F.6
022C:  BSF    03.5
022D:  BCF    1F.0
022E:  BCF    1F.1
022F:  BCF    1F.2
0230:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0231:  BCF    1F.4
0232:  BCF    1F.5
0233:  BCF    1F.6
0234:  BCF    03.5
0235:  BSF    1F.7
0236:  BSF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0237:  BSF    03.5
0238:  MOVF   01,W
0239:  ANDLW  C7
023A:  IORLW  08
023B:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
023C:  BCF    03.5
023D:  CLRF   10
....................    setup_comparator(NC_NC); 
023E:  MOVLW  07
023F:  MOVWF  19
0240:  BSF    03.5
0241:  MOVF   05,W
0242:  MOVWF  05
0243:  MOVLW  03
0244:  BCF    03.5
0245:  MOVWF  20
0246:  DECFSZ 20,F
0247:  GOTO   246
0248:  MOVF   19,W
0249:  BCF    0C.3
....................  
....................     while(true){ 
....................       if(input(BTN)) 
024A:  BSF    03.5
024B:  BSF    05.3
024C:  BCF    03.5
024D:  BTFSS  05.3
024E:  GOTO   3DB
....................       { 
....................          while(input(BTN)){delay_ms(1);} 
024F:  BSF    03.5
0250:  BSF    05.3
0251:  BCF    03.5
0252:  BTFSS  05.3
0253:  GOTO   258
0254:  MOVLW  01
0255:  MOVWF  42
0256:  CALL   046
0257:  GOTO   24F
....................           
....................          for(i = 0; i <= 1; i++) 
0258:  CLRF   27
0259:  MOVF   27,W
025A:  SUBLW  01
025B:  BTFSS  03.0
025C:  GOTO   2A5
....................          { 
....................             generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
025D:  BCF    03.0
025E:  RLF    24,W
025F:  MOVWF  28
0260:  INCF   28,W
0261:  CALL   022
0262:  MOVWF  23
0263:  MOVF   28,W
0264:  CALL   022
0265:  MOVWF  28
0266:  MOVF   23,W
0267:  MOVWF  29
0268:  MOVWF  2C
0269:  MOVF   28,W
026A:  MOVWF  2B
026B:  CLRF   2E
026C:  MOVF   25,W
026D:  MOVWF  2D
026E:  CALL   0FA
026F:  MOVF   26,W
0270:  MOVWF  42
0271:  CALL   046
....................             generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
0272:  BCF    03.0
0273:  RLF    24,W
0274:  MOVWF  28
0275:  INCF   28,W
0276:  CALL   022
0277:  MOVWF  23
0278:  MOVF   28,W
0279:  CALL   022
027A:  MOVWF  28
027B:  MOVF   23,W
027C:  MOVWF  29
027D:  MOVWF  2C
027E:  MOVF   28,W
027F:  MOVWF  2B
0280:  CLRF   2E
0281:  MOVF   25,W
0282:  MOVWF  2D
0283:  CALL   0FA
0284:  MOVF   26,W
0285:  MOVWF  42
0286:  CALL   046
....................             generate_tone(E_NOTE[quartet], duration*2); delay_ms(pause); 
0287:  BCF    03.0
0288:  RLF    24,W
0289:  MOVWF  28
028A:  INCF   28,W
028B:  CALL   022
028C:  MOVWF  23
028D:  MOVF   28,W
028E:  CALL   022
028F:  MOVWF  28
0290:  MOVF   23,W
0291:  MOVWF  29
0292:  BCF    03.0
0293:  RLF    25,W
0294:  MOVWF  2A
0295:  MOVF   23,W
0296:  MOVWF  2C
0297:  MOVF   28,W
0298:  MOVWF  2B
0299:  CLRF   2E
029A:  MOVF   2A,W
029B:  MOVWF  2D
029C:  CALL   0FA
029D:  MOVF   26,W
029E:  MOVWF  42
029F:  CALL   046
....................             delay_ms(pause); 
02A0:  MOVF   26,W
02A1:  MOVWF  42
02A2:  CALL   046
....................          } 
02A3:  INCF   27,F
02A4:  GOTO   259
....................          generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
02A5:  BCF    03.0
02A6:  RLF    24,W
02A7:  MOVWF  28
02A8:  INCF   28,W
02A9:  CALL   022
02AA:  MOVWF  23
02AB:  MOVF   28,W
02AC:  CALL   022
02AD:  MOVWF  28
02AE:  MOVF   23,W
02AF:  MOVWF  29
02B0:  MOVWF  2C
02B1:  MOVF   28,W
02B2:  MOVWF  2B
02B3:  CLRF   2E
02B4:  MOVF   25,W
02B5:  MOVWF  2D
02B6:  CALL   0FA
02B7:  MOVF   26,W
02B8:  MOVWF  42
02B9:  CALL   046
....................          generate_tone(G_NOTE[quartet], duration); delay_ms(pause); 
02BA:  BCF    03.0
02BB:  RLF    24,W
02BC:  MOVWF  28
02BD:  INCF   28,W
02BE:  CALL   03A
02BF:  MOVWF  23
02C0:  MOVF   28,W
02C1:  CALL   03A
02C2:  MOVWF  28
02C3:  MOVF   23,W
02C4:  MOVWF  29
02C5:  MOVWF  2C
02C6:  MOVF   28,W
02C7:  MOVWF  2B
02C8:  CLRF   2E
02C9:  MOVF   25,W
02CA:  MOVWF  2D
02CB:  CALL   0FA
02CC:  MOVF   26,W
02CD:  MOVWF  42
02CE:  CALL   046
....................          generate_tone(C_NOTE[quartet], duration); delay_ms(pause); 
02CF:  BCF    03.0
02D0:  RLF    24,W
02D1:  MOVWF  28
02D2:  INCF   28,W
02D3:  CALL   00A
02D4:  MOVWF  23
02D5:  MOVF   28,W
02D6:  CALL   00A
02D7:  MOVWF  28
02D8:  MOVF   23,W
02D9:  MOVWF  29
02DA:  MOVWF  2C
02DB:  MOVF   28,W
02DC:  MOVWF  2B
02DD:  CLRF   2E
02DE:  MOVF   25,W
02DF:  MOVWF  2D
02E0:  CALL   0FA
02E1:  MOVF   26,W
02E2:  MOVWF  42
02E3:  CALL   046
....................          generate_tone(D_NOTE[quartet], duration/2); delay_ms(pause); 
02E4:  BCF    03.0
02E5:  RLF    24,W
02E6:  MOVWF  28
02E7:  INCF   28,W
02E8:  CALL   016
02E9:  MOVWF  23
02EA:  MOVF   28,W
02EB:  CALL   016
02EC:  MOVWF  28
02ED:  MOVF   23,W
02EE:  MOVWF  29
02EF:  BCF    03.0
02F0:  RRF    25,W
02F1:  MOVWF  2A
02F2:  MOVF   23,W
02F3:  MOVWF  2C
02F4:  MOVF   28,W
02F5:  MOVWF  2B
02F6:  CLRF   2E
02F7:  MOVF   2A,W
02F8:  MOVWF  2D
02F9:  CALL   0FA
02FA:  MOVF   26,W
02FB:  MOVWF  42
02FC:  CALL   046
....................          generate_tone(E_NOTE[quartet], duration*2); delay_ms(pause*2); 
02FD:  BCF    03.0
02FE:  RLF    24,W
02FF:  MOVWF  28
0300:  INCF   28,W
0301:  CALL   022
0302:  MOVWF  23
0303:  MOVF   28,W
0304:  CALL   022
0305:  MOVWF  28
0306:  MOVF   23,W
0307:  MOVWF  29
0308:  BCF    03.0
0309:  RLF    25,W
030A:  MOVWF  2A
030B:  MOVF   23,W
030C:  MOVWF  2C
030D:  MOVF   28,W
030E:  MOVWF  2B
030F:  CLRF   2E
0310:  MOVF   2A,W
0311:  MOVWF  2D
0312:  CALL   0FA
0313:  BCF    03.0
0314:  RLF    26,W
0315:  MOVWF  28
0316:  MOVWF  42
0317:  CALL   046
....................          generate_tone(F_NOTE[quartet], duration); delay_ms(pause); 
0318:  BCF    03.0
0319:  RLF    24,W
031A:  MOVWF  28
031B:  INCF   28,W
031C:  CALL   02E
031D:  MOVWF  23
031E:  MOVF   28,W
031F:  CALL   02E
0320:  MOVWF  28
0321:  MOVF   23,W
0322:  MOVWF  29
0323:  MOVWF  2C
0324:  MOVF   28,W
0325:  MOVWF  2B
0326:  CLRF   2E
0327:  MOVF   25,W
0328:  MOVWF  2D
0329:  CALL   0FA
032A:  MOVF   26,W
032B:  MOVWF  42
032C:  CALL   046
....................          generate_tone(F_NOTE[quartet], duration); delay_ms(pause); 
032D:  BCF    03.0
032E:  RLF    24,W
032F:  MOVWF  28
0330:  INCF   28,W
0331:  CALL   02E
0332:  MOVWF  23
0333:  MOVF   28,W
0334:  CALL   02E
0335:  MOVWF  28
0336:  MOVF   23,W
0337:  MOVWF  29
0338:  MOVWF  2C
0339:  MOVF   28,W
033A:  MOVWF  2B
033B:  CLRF   2E
033C:  MOVF   25,W
033D:  MOVWF  2D
033E:  CALL   0FA
033F:  MOVF   26,W
0340:  MOVWF  42
0341:  CALL   046
....................          generate_tone(F_NOTE[quartet], duration); delay_ms(pause*2); 
0342:  BCF    03.0
0343:  RLF    24,W
0344:  MOVWF  28
0345:  INCF   28,W
0346:  CALL   02E
0347:  MOVWF  23
0348:  MOVF   28,W
0349:  CALL   02E
034A:  MOVWF  28
034B:  MOVF   23,W
034C:  MOVWF  29
034D:  MOVWF  2C
034E:  MOVF   28,W
034F:  MOVWF  2B
0350:  CLRF   2E
0351:  MOVF   25,W
0352:  MOVWF  2D
0353:  CALL   0FA
0354:  BCF    03.0
0355:  RLF    26,W
0356:  MOVWF  28
0357:  MOVWF  42
0358:  CALL   046
....................          generate_tone(F_NOTE[quartet], duration/2); delay_ms(pause); 
0359:  BCF    03.0
035A:  RLF    24,W
035B:  MOVWF  28
035C:  INCF   28,W
035D:  CALL   02E
035E:  MOVWF  23
035F:  MOVF   28,W
0360:  CALL   02E
0361:  MOVWF  28
0362:  MOVF   23,W
0363:  MOVWF  29
0364:  BCF    03.0
0365:  RRF    25,W
0366:  MOVWF  2A
0367:  MOVF   23,W
0368:  MOVWF  2C
0369:  MOVF   28,W
036A:  MOVWF  2B
036B:  CLRF   2E
036C:  MOVF   2A,W
036D:  MOVWF  2D
036E:  CALL   0FA
036F:  MOVF   26,W
0370:  MOVWF  42
0371:  CALL   046
....................          generate_tone(F_NOTE[quartet], duration); delay_ms(pause); 
0372:  BCF    03.0
0373:  RLF    24,W
0374:  MOVWF  28
0375:  INCF   28,W
0376:  CALL   02E
0377:  MOVWF  23
0378:  MOVF   28,W
0379:  CALL   02E
037A:  MOVWF  28
037B:  MOVF   23,W
037C:  MOVWF  29
037D:  MOVWF  2C
037E:  MOVF   28,W
037F:  MOVWF  2B
0380:  CLRF   2E
0381:  MOVF   25,W
0382:  MOVWF  2D
0383:  CALL   0FA
0384:  MOVF   26,W
0385:  MOVWF  42
0386:  CALL   046
....................          generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
0387:  BCF    03.0
0388:  RLF    24,W
0389:  MOVWF  28
038A:  INCF   28,W
038B:  CALL   022
038C:  MOVWF  23
038D:  MOVF   28,W
038E:  CALL   022
038F:  MOVWF  28
0390:  MOVF   23,W
0391:  MOVWF  29
0392:  MOVWF  2C
0393:  MOVF   28,W
0394:  MOVWF  2B
0395:  CLRF   2E
0396:  MOVF   25,W
0397:  MOVWF  2D
0398:  CALL   0FA
0399:  MOVF   26,W
039A:  MOVWF  42
039B:  CALL   046
....................          generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
039C:  BCF    03.0
039D:  RLF    24,W
039E:  MOVWF  28
039F:  INCF   28,W
03A0:  CALL   022
03A1:  MOVWF  23
03A2:  MOVF   28,W
03A3:  CALL   022
03A4:  MOVWF  28
03A5:  MOVF   23,W
03A6:  MOVWF  29
03A7:  MOVWF  2C
03A8:  MOVF   28,W
03A9:  MOVWF  2B
03AA:  CLRF   2E
03AB:  MOVF   25,W
03AC:  MOVWF  2D
03AD:  CALL   0FA
03AE:  MOVF   26,W
03AF:  MOVWF  42
03B0:  CALL   046
....................          generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
03B1:  BCF    03.0
03B2:  RLF    24,W
03B3:  MOVWF  28
03B4:  INCF   28,W
03B5:  CALL   022
03B6:  MOVWF  23
03B7:  MOVF   28,W
03B8:  CALL   022
03B9:  MOVWF  28
03BA:  MOVF   23,W
03BB:  MOVWF  29
03BC:  MOVWF  2C
03BD:  MOVF   28,W
03BE:  MOVWF  2B
03BF:  CLRF   2E
03C0:  MOVF   25,W
03C1:  MOVWF  2D
03C2:  CALL   0FA
03C3:  MOVF   26,W
03C4:  MOVWF  42
03C5:  CALL   046
....................          generate_tone(E_NOTE[quartet], duration); delay_ms(pause); 
03C6:  BCF    03.0
03C7:  RLF    24,W
03C8:  MOVWF  28
03C9:  INCF   28,W
03CA:  CALL   022
03CB:  MOVWF  23
03CC:  MOVF   28,W
03CD:  CALL   022
03CE:  MOVWF  28
03CF:  MOVF   23,W
03D0:  MOVWF  29
03D1:  MOVWF  2C
03D2:  MOVF   28,W
03D3:  MOVWF  2B
03D4:  CLRF   2E
03D5:  MOVF   25,W
03D6:  MOVWF  2D
03D7:  CALL   0FA
03D8:  MOVF   26,W
03D9:  MOVWF  42
03DA:  CALL   046
....................           
....................          //Full memory for PIC12F675 
....................       } 
....................     } 
03DB:  GOTO   24A
....................  
.................... } 
03DC:  SLEEP

Configuration Fuses:
   Word  1: 3FC4   NOWDT NOCPD NOPROTECT NOMCLR PUT INTRC_IO BROWNOUT
