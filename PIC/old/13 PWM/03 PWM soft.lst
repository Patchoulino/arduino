CCS PCH C Compiler, Version 4.104, 5967               08-ene-15 17:04

               Filename: E:\SD\UTA\PICC\QL200\Ejemplo\13 PWM\03 PWM soft.lst

               ROM used: 786 bytes (2%)
                         Largest free fragment is 31982
               RAM used: 7 (0%) at main() level
                         30 (1%) worst case
               Stack:    1 locations

*
0000:  GOTO   002C
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #include <18Fconfig1.h> 
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT128                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL        //cambio para frec      //External clock 
.................... #FUSES PROTECT                 //Code not protected from reading 
.................... #FUSES NOBROWNOUT                //No brownout reset 
.................... #FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES CPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                    //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES LPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL1                //cambio para frec   //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1             //cambio para frec //System Clock by 4 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
....................  
....................  
....................  
....................  
.................... #use delay(clock=48000000)//Frecuencia de reloj 
0004:  CLRF   FEA
0006:  MOVLW  1D
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    002A
000E:  MOVLW  0F
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  8F
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  NOP   
0026:  DECFSZ FEF,F
0028:  BRA    000E
002A:  RETLW  00
....................  
.................... #word corr     = 0x200 
....................  
.................... #bit  corr0    = corr.0 
.................... #bit  corr1    = corr.1 
.................... #bit  corr2    = corr.2 
.................... #bit  corr3    = corr.3 
.................... #bit  corr4    = corr.4 
.................... #bit  corr5    = corr.5 
.................... #bit  corr6    = corr.6 
.................... #bit  corr7    = corr.7 
.................... #bit  corr8    = corr.8 
.................... #bit  corr9    = corr.9 
.................... #bit  corr10   = corr.10 
.................... #bit  corr11   = corr.11 
.................... #bit  corr12   = corr.12 
.................... #bit  corr13   = corr.13 
.................... #bit  corr14   = corr.14 
.................... #bit  corr15   = corr.15 
....................  
.................... void main() 
.................... { 
002C:  CLRF   FF8
002E:  BCF    FD0.7
0030:  CLRF   FEA
0032:  CLRF   FE9
0034:  MOVF   FC1,W
0036:  ANDLW  C0
0038:  IORLW  0F
003A:  MOVWF  FC1
003C:  MOVLW  07
003E:  MOVWF  FB4
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
0040:  MOVF   FC1,W
0042:  ANDLW  C0
0044:  IORLW  0F
0046:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
0048:  BCF    FC0.0
004A:  BCF    FC0.1
004C:  BCF    FC0.2
004E:  BCF    FC0.7
0050:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0052:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0054:  BCF    FC6.5
0056:  BCF    F94.7
0058:  BSF    F93.0
005A:  BCF    F93.1
005C:  MOVLW  01
005E:  MOVWF  FC6
0060:  MOVLW  00
0062:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0064:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0066:  MOVLW  80
0068:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
006A:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
006C:  MOVLW  00
006E:  MOVWF  FCA
0070:  MOVLW  00
0072:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
0074:  MOVLW  07
0076:  MOVWF  FB4
0078:  MOVF   F92,W
007A:  MOVWF  F92
007C:  MOVLW  27
007E:  MOVWF  00
0080:  DECFSZ 00,F
0082:  BRA    0080
0084:  BRA    0086
0086:  MOVF   FB4,W
0088:  BCF    FA1.6
....................    setup_vref(FALSE); 
008A:  CLRF   FB5
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
....................  
....................    set_tris_a(0x0);                   //configura la puerto a como salidas 
008C:  MOVLW  00
008E:  MOVWF  F92
....................    set_tris_c(0x0);                   //configura la puerto c como salidas 
0090:  MOVWF  F94
....................    set_tris_d(0x0);                   //configura la puerto d como salidas 
0092:  MOVWF  F95
....................  
....................    // TODO: USER CODE!! 
....................    int i; 
....................    int8 pwm[16]; 
....................     
....................     
....................    for (i=1;i<3;i++) 
0094:  MOVLW  01
0096:  MOVWF  05
0098:  MOVF   05,W
009A:  SUBLW  02
009C:  BNC   00C8
....................    { 
....................       output_c(255); 
009E:  CLRF   F94
00A0:  MOVLW  FF
00A2:  MOVWF  F8B
....................       delay_ms(500); 
00A4:  MOVLW  02
00A6:  MOVWF  1C
00A8:  MOVLW  FA
00AA:  MOVWF  1D
00AC:  RCALL  0004
00AE:  DECFSZ 1C,F
00B0:  BRA    00A8
....................       output_c(0); 
00B2:  CLRF   F94
00B4:  CLRF   F8B
....................       delay_ms(500); 
00B6:  MOVLW  02
00B8:  MOVWF  1C
00BA:  MOVLW  FA
00BC:  MOVWF  1D
00BE:  RCALL  0004
00C0:  DECFSZ 1C,F
00C2:  BRA    00BA
....................    }    
00C4:  INCF   05,F
00C6:  BRA    0098
....................          for (i=0;i<16;i++) 
00C8:  CLRF   05
00CA:  MOVF   05,W
00CC:  SUBLW  0F
00CE:  BNC   00E6
....................          { 
....................             pwm[i] = 100; 
00D0:  CLRF   03
00D2:  MOVF   05,W
00D4:  ADDLW  06
00D6:  MOVWF  FE9
00D8:  MOVLW  00
00DA:  ADDWFC 03,W
00DC:  MOVWF  FEA
00DE:  MOVLW  64
00E0:  MOVWF  FEF
....................          } 
00E2:  INCF   05,F
00E4:  BRA    00CA
....................  
....................    corr = 1; 
00E6:  MOVLB  2
00E8:  CLRF   x01
00EA:  MOVLW  01
00EC:  MOVWF  x00
....................    int16 cont = 0; 
....................    int32 cont2 = 0; 
00EE:  CLRF   17
00F0:  CLRF   16
00F2:  CLRF   1B
00F4:  CLRF   1A
00F6:  CLRF   19
00F8:  CLRF   18
....................    output_c(0); 
00FA:  CLRF   F94
00FC:  CLRF   F8B
....................    output_b(0); 
00FE:  CLRF   F93
0100:  CLRF   F8A
....................    output_d(0); 
0102:  CLRF   F95
0104:  CLRF   F8C
....................     
....................    while(true) 
....................    { 
....................      cont++; 
0106:  INCF   16,F
0108:  BTFSC  FD8.2
010A:  INCF   17,F
....................      cont2++; 
010C:  MOVLW  01
010E:  ADDWF  18,F
0110:  BTFSC  FD8.0
0112:  INCF   19,F
0114:  BTFSC  FD8.2
0116:  INCF   1A,F
0118:  BTFSC  FD8.2
011A:  INCF   1B,F
....................      if (cont == pwm[0]) output_bit(PIN_B0,1); 
011C:  MOVF   06,W
011E:  SUBWF  16,W
0120:  BNZ   012A
0122:  MOVF   17,F
0124:  BNZ   012A
0126:  BSF    F8A.0
0128:  BCF    F93.0
....................      if (cont == pwm[1]) output_bit(PIN_B1,1); 
012A:  MOVF   07,W
012C:  SUBWF  16,W
012E:  BNZ   0138
0130:  MOVF   17,F
0132:  BNZ   0138
0134:  BSF    F8A.1
0136:  BCF    F93.1
....................      if (cont == pwm[2]) output_bit(PIN_B2,1); 
0138:  MOVF   08,W
013A:  SUBWF  16,W
013C:  BNZ   0146
013E:  MOVF   17,F
0140:  BNZ   0146
0142:  BSF    F8A.2
0144:  BCF    F93.2
....................      if (cont == pwm[3]) output_bit(PIN_B3,1); 
0146:  MOVF   09,W
0148:  SUBWF  16,W
014A:  BNZ   0154
014C:  MOVF   17,F
014E:  BNZ   0154
0150:  BSF    F8A.3
0152:  BCF    F93.3
....................      if (cont == pwm[4]) output_bit(PIN_B4,1); 
0154:  MOVF   0A,W
0156:  SUBWF  16,W
0158:  BNZ   0162
015A:  MOVF   17,F
015C:  BNZ   0162
015E:  BSF    F8A.4
0160:  BCF    F93.4
....................      if (cont == pwm[5]) output_bit(PIN_B5,1); 
0162:  MOVF   0B,W
0164:  SUBWF  16,W
0166:  BNZ   0170
0168:  MOVF   17,F
016A:  BNZ   0170
016C:  BSF    F8A.5
016E:  BCF    F93.5
....................      if (cont == pwm[6]) output_bit(PIN_B6,1); 
0170:  MOVF   0C,W
0172:  SUBWF  16,W
0174:  BNZ   017E
0176:  MOVF   17,F
0178:  BNZ   017E
017A:  BSF    F8A.6
017C:  BCF    F93.6
....................      if (cont == pwm[7]) output_bit(PIN_B7,1); 
017E:  MOVF   0D,W
0180:  SUBWF  16,W
0182:  BNZ   018C
0184:  MOVF   17,F
0186:  BNZ   018C
0188:  BSF    F8A.7
018A:  BCF    F93.7
....................      if (cont == pwm[8]) output_bit(PIN_C7,1); 
018C:  MOVF   0E,W
018E:  SUBWF  16,W
0190:  BNZ   019A
0192:  MOVF   17,F
0194:  BNZ   019A
0196:  BSF    F8B.7
0198:  BCF    F94.7
....................      if (cont == pwm[9]) output_bit(PIN_C6,1); 
019A:  MOVF   0F,W
019C:  SUBWF  16,W
019E:  BNZ   01A8
01A0:  MOVF   17,F
01A2:  BNZ   01A8
01A4:  BSF    F8B.6
01A6:  BCF    F94.6
....................      if (cont == pwm[10]) output_bit(PIN_D5,1); 
01A8:  MOVF   10,W
01AA:  SUBWF  16,W
01AC:  BNZ   01B6
01AE:  MOVF   17,F
01B0:  BNZ   01B6
01B2:  BSF    F8C.5
01B4:  BCF    F95.5
....................      if (cont == pwm[11]) output_bit(PIN_D4,1); 
01B6:  MOVF   11,W
01B8:  SUBWF  16,W
01BA:  BNZ   01C4
01BC:  MOVF   17,F
01BE:  BNZ   01C4
01C0:  BSF    F8C.4
01C2:  BCF    F95.4
....................      if (cont == pwm[12]) output_bit(PIN_D3,1); 
01C4:  MOVF   12,W
01C6:  SUBWF  16,W
01C8:  BNZ   01D2
01CA:  MOVF   17,F
01CC:  BNZ   01D2
01CE:  BSF    F8C.3
01D0:  BCF    F95.3
....................      if (cont == pwm[13]) output_bit(PIN_C2,1); 
01D2:  MOVF   13,W
01D4:  SUBWF  16,W
01D6:  BNZ   01E0
01D8:  MOVF   17,F
01DA:  BNZ   01E0
01DC:  BSF    F8B.2
01DE:  BCF    F94.2
....................      if (cont == pwm[14]) output_bit(PIN_C1,1); 
01E0:  MOVF   14,W
01E2:  SUBWF  16,W
01E4:  BNZ   01EE
01E6:  MOVF   17,F
01E8:  BNZ   01EE
01EA:  BSF    F8B.1
01EC:  BCF    F94.1
....................      if (cont == pwm[15]) output_bit(PIN_C0,1); 
01EE:  MOVF   15,W
01F0:  SUBWF  16,W
01F2:  BNZ   01FC
01F4:  MOVF   17,F
01F6:  BNZ   01FC
01F8:  BSF    F8B.0
01FA:  BCF    F94.0
....................      if (cont >= 100)  
01FC:  MOVF   17,F
01FE:  BNZ   0206
0200:  MOVF   16,W
0202:  SUBLW  63
0204:  BC    0216
....................      { 
....................          cont = 0; 
0206:  CLRF   17
0208:  CLRF   16
....................          output_c(0); 
020A:  CLRF   F94
020C:  CLRF   F8B
....................          output_b(0); 
020E:  CLRF   F93
0210:  CLRF   F8A
....................          output_d(0); 
0212:  CLRF   F95
0214:  CLRF   F8C
....................      } 
....................      if (cont2 >= 4000)  
0216:  MOVF   1B,F
0218:  BNZ   0230
021A:  MOVF   1A,F
021C:  BNZ   0230
021E:  MOVF   19,W
0220:  SUBLW  0E
0222:  BTFSC  FD8.0
0224:  BRA    02F6
0226:  XORLW  FF
0228:  BNZ   0230
022A:  MOVF   18,W
022C:  SUBLW  9F
022E:  BC    02F6
....................      { 
....................          cont2 = 0; 
0230:  CLRF   1B
0232:  CLRF   1A
0234:  CLRF   19
0236:  CLRF   18
.................... //         output_c(corr); 
....................          if (corr0 == 1) pwm[0]=50; 
0238:  BTFSS  x00.0
023A:  BRA    0240
023C:  MOVLW  32
023E:  MOVWF  06
....................          if (corr1 == 1) pwm[1]=50; 
0240:  BTFSS  x00.1
0242:  BRA    0248
0244:  MOVLW  32
0246:  MOVWF  07
....................          if (corr2 == 1) pwm[2]=50; 
0248:  BTFSS  x00.2
024A:  BRA    0250
024C:  MOVLW  32
024E:  MOVWF  08
....................          if (corr3 == 1) pwm[3]=50; 
0250:  BTFSS  x00.3
0252:  BRA    0258
0254:  MOVLW  32
0256:  MOVWF  09
....................          if (corr4 == 1) pwm[4]=50; 
0258:  BTFSS  x00.4
025A:  BRA    0260
025C:  MOVLW  32
025E:  MOVWF  0A
....................          if (corr5 == 1) pwm[5]=50; 
0260:  BTFSS  x00.5
0262:  BRA    0268
0264:  MOVLW  32
0266:  MOVWF  0B
....................          if (corr6 == 1) pwm[6]=50; 
0268:  BTFSS  x00.6
026A:  BRA    0270
026C:  MOVLW  32
026E:  MOVWF  0C
....................          if (corr7 == 1) pwm[7]=50; 
0270:  BTFSS  x00.7
0272:  BRA    0278
0274:  MOVLW  32
0276:  MOVWF  0D
....................          if (corr8 == 1) pwm[8]=50; 
0278:  BTFSS  x01.0
027A:  BRA    0280
027C:  MOVLW  32
027E:  MOVWF  0E
....................          if (corr9 == 1) pwm[9]=50; 
0280:  BTFSS  x01.1
0282:  BRA    0288
0284:  MOVLW  32
0286:  MOVWF  0F
....................          if (corr10 == 1) pwm[10]=50; 
0288:  BTFSS  x01.2
028A:  BRA    0290
028C:  MOVLW  32
028E:  MOVWF  10
....................          if (corr11 == 1) pwm[11]=50; 
0290:  BTFSS  x01.3
0292:  BRA    0298
0294:  MOVLW  32
0296:  MOVWF  11
....................          if (corr12 == 1) pwm[12]=50; 
0298:  BTFSS  x01.4
029A:  BRA    02A0
029C:  MOVLW  32
029E:  MOVWF  12
....................          if (corr13 == 1) pwm[13]=50; 
02A0:  BTFSS  x01.5
02A2:  BRA    02A8
02A4:  MOVLW  32
02A6:  MOVWF  13
....................          if (corr14 == 1) pwm[14]=50; 
02A8:  BTFSS  x01.6
02AA:  BRA    02B0
02AC:  MOVLW  32
02AE:  MOVWF  14
....................          if (corr15 == 1) pwm[15]=50; 
02B0:  BTFSS  x01.7
02B2:  BRA    02B8
02B4:  MOVLW  32
02B6:  MOVWF  15
....................          corr = corr << 1; 
02B8:  BCF    FD8.0
02BA:  RLCF   x00,F
02BC:  RLCF   x01,F
....................          for (i=0;i<16;i++) 
02BE:  CLRF   05
02C0:  MOVF   05,W
02C2:  SUBLW  0F
02C4:  BNC   02F6
....................          { 
....................             pwm[i] = pwm[i] + 10; 
02C6:  CLRF   03
02C8:  MOVF   05,W
02CA:  ADDLW  06
02CC:  MOVWF  01
02CE:  MOVLW  00
02D0:  ADDWFC 03,F
02D2:  MOVFF  03,1D
02D6:  CLRF   03
02D8:  MOVF   05,W
02DA:  ADDLW  06
02DC:  MOVWF  FE9
02DE:  MOVLW  00
02E0:  ADDWFC 03,W
02E2:  MOVWF  FEA
02E4:  MOVLW  0A
02E6:  ADDWF  FEF,W
02E8:  MOVFF  1D,FEA
02EC:  MOVFF  01,FE9
02F0:  MOVWF  FEF
....................          } 
02F2:  INCF   05,F
02F4:  BRA    02C0
....................      } 
....................      if (corr == 0) corr = 1; 
02F6:  MOVF   x00,F
02F8:  BNZ   0304
02FA:  MOVF   x01,F
02FC:  BNZ   0304
02FE:  CLRF   x01
0300:  MOVLW  01
0302:  MOVWF  x00
....................      delay_us(10);  
0304:  MOVLW  27
0306:  MOVWF  00
0308:  DECFSZ 00,F
030A:  BRA    0308
030C:  BRA    030E
....................        
....................        
....................        
....................    } 
030E:  BRA    0106
....................     
.................... } 
....................  
....................  
....................  
0310:  SLEEP 

Configuration Fuses:
   Word  1: 0E20   NOIESO NOFCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: 4000   PROTECT CPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
