CCS PCH C Compiler, Version 4.104, 5967               04-ene-15 14:30

               Filename: E:\SD\UTA\PICC\QL200\Ejemplo\09 Display seg_6\09 Display seg_6 analog.lst

               ROM used: 446 bytes (1%)
                         Largest free fragment is 32322
               RAM used: 5 (0%) at main() level
                         28 (1%) worst case
               Stack:    1 locations

*
0000:  GOTO   002C
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT128                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL        //cambio para frec      //External clock 
.................... #FUSES PROTECT                 //Code not protected from reading 
.................... #FUSES NOBROWNOUT                //No brownout reset 
.................... #FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES CPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                    //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES LPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL1                //cambio para frec   //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1             //cambio para frec //System Clock by 4 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... //#FUSES ICPRT                     //ICPRT enabled 
....................  
....................  
....................     #use delay(clock=48000000)//Frecuencia de reloj 
*
0004:  CLRF   FEA
0006:  MOVLW  1C
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    002A
000E:  MOVLW  0F
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  8F
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  NOP   
0026:  DECFSZ FEF,F
0028:  BRA    000E
002A:  RETLW  00
....................     #use fast_io (a) 
....................  
....................    #byte segment = 0x200 
....................     
....................    #bit PC = segment.0 
....................  
.................... void main() 
.................... { 
002C:  CLRF   FF8
002E:  BCF    FD0.7
0030:  CLRF   FEA
0032:  CLRF   FE9
0034:  MOVF   FC1,W
0036:  ANDLW  C0
0038:  IORLW  0F
003A:  MOVWF  FC1
003C:  MOVLW  07
003E:  MOVWF  FB4
....................  
....................    setup_adc_ports(AN0|VSS_VDD); 
0040:  MOVF   FC1,W
0042:  ANDLW  C0
0044:  IORLW  0E
0046:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0048:  BSF    FC0.0
004A:  BSF    FC0.1
004C:  BSF    FC0.2
004E:  BSF    FC0.7
0050:  BSF    FC2.0
.................... //   setup_adc_ports(NO_ANALOGS|VSS_VDD); 
.................... //   setup_adc(ADC_CLOCK_DIV_2); 
....................    setup_psp(PSP_DISABLED); 
0052:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0054:  BCF    FC6.5
0056:  BCF    F94.7
0058:  BSF    F93.0
005A:  BCF    F93.1
005C:  MOVLW  01
005E:  MOVWF  FC6
0060:  MOVLW  00
0062:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0064:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0066:  MOVLW  80
0068:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
006A:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
006C:  MOVLW  00
006E:  MOVWF  FCA
0070:  MOVLW  00
0072:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
0074:  MOVLW  07
0076:  MOVWF  FB4
0078:  MOVF   F92,W
007A:  MOVWF  F92
007C:  MOVLW  27
007E:  MOVWF  00
0080:  DECFSZ 00,F
0082:  BRA    0080
0084:  BRA    0086
0086:  MOVF   FB4,W
0088:  BCF    FA1.6
....................    setup_vref(FALSE); 
008A:  CLRF   FB5
.................... //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
....................  
....................  
....................    set_tris_a(0x01);                   //configura la puerto a como salidas 
008C:  MOVLW  01
008E:  MOVWF  F92
....................    set_tris_b(0x0);                   //configura la puerto a como salidas 
0090:  MOVLW  00
0092:  MOVWF  F93
....................    set_tris_c(0x0);                   //configura la puerto c como salidas 
0094:  MOVWF  F94
....................    set_tris_d(0x0);                   //configura la puerto d como salidas 
0096:  MOVWF  F95
....................  
....................    // TODO: USER CODE!! 
....................    int i, j; 
....................    int display[6]; 
....................    int dato [10]; 
....................    int salida; 
....................    int16 tiempo = 1; 
0098:  CLRF   19
009A:  MOVLW  01
009C:  MOVWF  18
....................  
....................    i = 5; 
009E:  MOVLW  05
00A0:  MOVWF  05
....................    j = 0; 
00A2:  CLRF   06
....................     
....................    display[0] = 0b11111110; 
00A4:  MOVLW  FE
00A6:  MOVWF  07
....................    display[1] = 0b11111101; 
00A8:  MOVLW  FD
00AA:  MOVWF  08
....................    display[2] = 0b11111011; 
00AC:  MOVLW  FB
00AE:  MOVWF  09
....................    display[3] = 0b11110111; 
00B0:  MOVLW  F7
00B2:  MOVWF  0A
....................    display[4] = 0b11101111; 
00B4:  MOVLW  EF
00B6:  MOVWF  0B
....................    display[5] = 0b11011111; 
00B8:  MOVLW  DF
00BA:  MOVWF  0C
....................  
....................    dato[0] = 192; 
00BC:  MOVLW  C0
00BE:  MOVWF  0D
....................    dato[1] = 249; 
00C0:  MOVLW  F9
00C2:  MOVWF  0E
....................    dato[2] = 164; 
00C4:  MOVLW  A4
00C6:  MOVWF  0F
....................    dato[3] = 176; 
00C8:  MOVLW  B0
00CA:  MOVWF  10
....................    dato[4] = 153; 
00CC:  MOVLW  99
00CE:  MOVWF  11
....................    dato[5] = 146; 
00D0:  MOVLW  92
00D2:  MOVWF  12
....................    dato[6] = 130; 
00D4:  MOVLW  82
00D6:  MOVWF  13
....................    dato[7] = 216; 
00D8:  MOVLW  D8
00DA:  MOVWF  14
....................    dato[8] = 128; 
00DC:  MOVLW  80
00DE:  MOVWF  15
....................    dato[9] = 152; 
00E0:  MOVLW  98
00E2:  MOVWF  16
....................  
....................    set_adc_channel(0); 
00E4:  MOVLW  00
00E6:  MOVWF  01
00E8:  MOVF   FC2,W
00EA:  ANDLW  C3
00EC:  IORWF  01,W
00EE:  MOVWF  FC2
....................     
....................     
....................    int ti; 
....................    while(true) 
....................    { 
....................       switch (i) { 
00F0:  MOVF   05,W
00F2:  ADDLW  FA
00F4:  BC    0120
00F6:  ADDLW  06
00F8:  GOTO   0198
....................          case 0:  salida = dato[2]; 
00FC:  MOVFF  0F,17
....................                   break; 
0100:  BRA    0120
....................          case 1:  salida = dato[5]; 
0102:  MOVFF  12,17
....................                   break; 
0106:  BRA    0120
....................          case 2:  salida = dato[2]; 
0108:  MOVFF  0F,17
....................                   break; 
010C:  BRA    0120
....................          case 3:  salida = dato[1]; 
010E:  MOVFF  0E,17
....................                   break; 
0112:  BRA    0120
....................          case 4:  salida = dato[0]; 
0114:  MOVFF  0D,17
....................                   break; 
0118:  BRA    0120
....................          case 5:  salida = dato[9]; 
011A:  MOVFF  16,17
....................                   break; } 
011E:  BRA    0120
....................       output_d(salida);          
0120:  CLRF   F95
0122:  MOVFF  17,F8C
....................       tiempo = read_adc(); 
0126:  BSF    FC2.1
0128:  BTFSC  FC2.1
012A:  BRA    0128
012C:  MOVFF  FC3,18
0130:  MOVFF  FC4,19
....................       segment = display[i]; 
0134:  CLRF   03
0136:  MOVF   05,W
0138:  ADDLW  07
013A:  MOVWF  FE9
013C:  MOVLW  00
013E:  ADDWFC 03,W
0140:  MOVWF  FEA
0142:  MOVFF  FEF,200
0146:  MOVLB  2
....................       output_bit(PIN_B0,PC); 
0148:  BTFSC  x00.0
014A:  BRA    0150
014C:  BCF    F8A.0
014E:  BRA    0152
0150:  BSF    F8A.0
0152:  BCF    F93.0
....................       output_a(display[i]);      // seleccion del numero de display con logica negativa 
0154:  CLRF   03
0156:  MOVF   05,W
0158:  ADDLW  07
015A:  MOVWF  FE9
015C:  MOVLW  00
015E:  ADDWFC 03,W
0160:  MOVWF  FEA
0162:  MOVFF  FEF,1B
0166:  MOVFF  1B,F89
....................       delay_ms(tiempo); 
016A:  MOVFF  19,1B
016E:  INCF   1B,F
0170:  DECF   1B,F
0172:  BTFSC  FD8.2
0174:  BRA    0182
0176:  MOVLW  FF
0178:  MOVWF  1C
017A:  MOVLB  0
017C:  RCALL  0004
017E:  MOVLB  2
0180:  BRA    0170
0182:  MOVFF  18,1C
0186:  MOVLB  0
0188:  RCALL  0004
....................       i++; 
018A:  INCF   05,F
....................       if (i >  5) i = 0; 
018C:  MOVF   05,W
018E:  SUBLW  05
0190:  BTFSS  FD8.0
0192:  CLRF   05
....................    } 
0194:  BRA    00F0
.................... } 
....................  
....................  
0196:  SLEEP 

Configuration Fuses:
   Word  1: 0E20   NOIESO NOFCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: 4000   PROTECT CPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
